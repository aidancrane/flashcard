/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/set-editor-metadata.js":
/*!*********************************************!*\
  !*** ./resources/js/set-editor-metadata.js ***!
  \*********************************************/
/***/ (() => {

eval("// This file contains all the JS logic to interact with the set editor metadata,\n// specifically the title, description and categories.\n$('document').ready(function () {\n  // submitting a new title consists of three elements,\n  // change-name-div - A div hiding an input box.\n  // change-name-input - The input, hidden by default.\n  // change-name-button - The button.\n  // change-name-h1 - The original or updated H1 title.\n  var change_name_mode = false;\n  var change_description_mode = false;\n  var change_categories_mode = false; // flip button handled by each flip function.\n  // they only flip if successful, otherwise user will see an error toast\n  // message.\n\n  function flipButton(id) {\n    if (document.getElementById(id).textContent.includes(\"Done\")) {\n      if (id == \"change-name-button\") {\n        $(\"#\" + id).addClass(\"btn-outline-info\");\n        $(\"#\" + id).removeClass(\"btn-outline-success\");\n        $(\"#\" + id).removeClass(\"pt-0\");\n        document.getElementById(id).innerHTML = \"Change Name\";\n      }\n\n      if (id == \"change-description\") {\n        $(\"#\" + id).addClass(\"btn-outline-info\");\n        $(\"#\" + id).removeClass(\"btn-outline-success\");\n        $(\"#\" + id).removeClass(\"pt-0\");\n        document.getElementById(id).innerHTML = \"Change\";\n      }\n\n      if (id == \"change-categories\") {\n        $(\"#\" + id).addClass(\"btn-outline-info\");\n        $(\"#\" + id).removeClass(\"btn-outline-success\");\n        $(\"#\" + id).removeClass(\"pt-0\");\n        document.getElementById(id).innerHTML = \"Change\";\n      }\n    } else {\n      $(\"#\" + id).removeClass(\"btn-outline-info\");\n      $(\"#\" + id).addClass(\"btn-outline-success\");\n      $(\"#\" + id).addClass(\"pt-0\");\n      document.getElementById(id).innerHTML = \"<span class=\\\"mdi mdi-18px mdi-check\\\"></span> Done\";\n    }\n  } //\n  //      Change Title Only\n  //\n  // User has clicked done tick button on the top change name button.\n\n\n  function submitNewTitle() {\n    event.preventDefault();\n    var setID = $(\".set-id\").val();\n    var token = $(\"input[name=\\\"_token\\\"]\").val();\n    var set_title = $(\"#change-name-input\").val();\n    var clean_set_title = set_title.replace(/<\\/?[^>]+(>|$)/g, \"\");\n    $(\"#change-name-input\").val(clean_set_title);\n    $.ajax({\n      type: \"PUT\",\n      url: \"/sets/\" + setID + \"\",\n      data: {\n        _token: token,\n        set_title: clean_set_title\n      },\n      success: function success(data) {\n        // All is well, well hopefully.\n        var json = $.parseJSON(data);\n        $('.toast-body').text(json.message_text);\n        $('.toast').toast('show'); // it worked,\n        // Undo Everything.\n\n        changeInputToTitle();\n        change_name_mode = !change_name_mode;\n      },\n      error: function error(data) {\n        // Something is not quite right.\n        var errors = $.parseJSON(data.responseText);\n        $('.toast-body').text(\"\");\n        $('.toast-body').append(errors[\"errors\"][\"set_title\"][0]);\n        $('.toast').toast('show');\n      }\n    });\n  } // Clicked Change for an even number of times.\n\n\n  function changeTitleToInput() {\n    var current = $(\"#change-name-h1\").text();\n    $(\"#change-name-input\").val(current);\n    $(\"#change-name-div\").removeAttr('hidden');\n    document.getElementById(\"change-name-h1\").setAttribute('hidden', true);\n    flipButton(\"change-name-button\");\n  } // Clicked change an odd number of times.\n\n\n  function changeInputToTitle() {\n    var current = $(\"#change-name-input\").val();\n    $(\"#change-name-h1\").html(current);\n    $(\"#change-name-h1\").removeAttr('hidden');\n    document.getElementById(\"change-name-div\").setAttribute('hidden', true);\n    flipButton(\"change-name-button\");\n  } // When the user clicks on change name.\n\n\n  $(document).on(\"click\", \".set-title\", function (e) {\n    if (change_name_mode == false) {\n      console.log(\"User has selected change set name.\");\n      changeTitleToInput();\n      change_name_mode = !change_name_mode;\n    } else {\n      console.log(\"User would like to save set name.\");\n      submitNewTitle();\n    }\n  }); // When the user presses enter on change name.\n\n  $(\"#change-name-input\").keyup(function (event) {\n    if (event.keyCode === 13) {\n      $(\"#change-name-button\").click();\n    }\n  }); //\n  //      Change Description Only\n  //\n\n  function submitNewDescription() {\n    event.preventDefault();\n    var setID = $(\".set-id\").val();\n    var token = $(\"input[name=\\\"_token\\\"]\").val();\n    var set_description = $(\"#change-description-input\").val();\n    var clean_set_description = set_description.replace(/<\\/?[^>]+(>|$)/g, \"\");\n    $(\"#change-description-input\").val(clean_set_description);\n    $.ajax({\n      type: \"PUT\",\n      url: \"/sets/\" + setID + \"\",\n      data: {\n        _token: token,\n        set_description: clean_set_description\n      },\n      success: function success(data) {\n        // All is well, well hopefully.\n        var json = $.parseJSON(data);\n        $('.toast-body').text(json.message_text);\n        $('.toast').toast('show'); // it worked,\n        // Undo Everything.\n\n        changeInputToDescription();\n        change_description_mode = !change_description_mode;\n      },\n      error: function error(data) {\n        // Something is not quite right.\n        var errors = $.parseJSON(data.responseText);\n        $('.toast-body').text(\"\");\n        $('.toast-body').append(errors[\"errors\"][\"set_description\"][0]);\n        $('.toast').toast('show');\n      }\n    });\n  }\n\n  function changeDescriptionToInput() {\n    var current = $(\"#flashcard-description\").html(); // If user has the default description, no need to update it.\n\n    if (current == \"This flashcard set doesn't have a description yet.\") {\n      current = \"\";\n    }\n\n    $(\"#change-description-input\").val(current);\n    $(\"#change-description-div\").removeAttr('hidden');\n    document.getElementById(\"flashcard-description\").setAttribute('hidden', true);\n    flipButton(\"change-description\");\n  }\n\n  function changeInputToDescription() {\n    var current = $(\"#change-description-input\").val();\n    $(\"#flashcard-description\").html(current);\n    $(\"#flashcard-description\").removeAttr('hidden');\n    document.getElementById(\"change-description-div\").setAttribute('hidden', true);\n    flipButton(\"change-description\");\n  } // When the user clicks on change description.\n\n\n  $(document).on(\"click\", \"#change-description\", function (e) {\n    if (change_description_mode == false) {\n      console.log(\"User has clicked the button that turns on the flashcard description input.\");\n      changeDescriptionToInput();\n      change_description_mode = !change_description_mode;\n    } else {\n      console.log(\"User would like to save the new set description.\");\n      submitNewDescription();\n    }\n  }); // When the user presses enter on change description.\n\n  $(\"#change-description-input\").keyup(function (event) {\n    if (event.keyCode === 13) {\n      $(\"#change-description\").click();\n    }\n  }); //\n  //      Change Categories Only\n  //\n\n  function submitNewCategories() {\n    event.preventDefault();\n    var setID = $(\".set-id\").val();\n    var token = $(\"input[name=\\\"_token\\\"]\").val();\n    var set_categories = $(\"#change-categories-input\").val();\n    var clean_set_categories = set_categories.replace(/<\\/?[^>]+(>|$)/g, \"\");\n    $(\"#change-categories-input\").val(clean_set_categories);\n    $.ajax({\n      type: \"PUT\",\n      url: \"/sets/\" + setID + \"\",\n      data: {\n        _token: token,\n        category: clean_set_categories\n      },\n      success: function success(data) {\n        // All is well, well hopefully.\n        var json = $.parseJSON(data);\n        $('.toast-body').text(json.message_text);\n        $('.toast').toast('show'); // it worked,\n        // Undo Everything.\n\n        changeInputToCategoryPills();\n        change_categories_mode = !change_categories_mode;\n      },\n      error: function error(data) {\n        // Something is not quite right.\n        var errors = $.parseJSON(data.responseText);\n        $('.toast-body').text(\"\");\n        $('.toast-body').append(errors[\"errors\"][\"category\"][0]);\n        $('.toast').toast('show');\n      }\n    });\n  }\n\n  function changeCategoriesToInput() {\n    var current = $(\"#flashcard-categories\").html(); // If user has the default category, no need to update it.\n\n    if (current == \"This flashcard set doesn't have a category yet.\") {\n      current = \"\";\n    }\n\n    $(\"#change-categories-input\").val(current);\n    $(\"#change-categories-div\").removeAttr('hidden');\n    document.getElementById(\"flashcard-categories\").setAttribute('hidden', true);\n    flipButton(\"change-categories\");\n  }\n\n  function changeInputToCategoryPills() {\n    var current = $(\"#change-categories-input\").val();\n    $(\"#flashcard-categories\").html(current);\n    $(\"#flashcard-categories\").removeAttr('hidden');\n    document.getElementById(\"change-categories-div\").setAttribute('hidden', true);\n    flipButton(\"change-categories\");\n  }\n\n  $(document).on(\"click\", \"#change-categories\", function (e) {\n    if (change_categories_mode == false) {\n      console.log(\"User has clicked the button that turns on the flashcard categories input.\");\n      changeCategoriesToInput();\n      change_categories_mode = !change_categories_mode;\n    } else {\n      console.log(\"User would like to save the new set categories.\");\n      submitNewCategories();\n    }\n  }); // When the user presses enter on change name.\n\n  $(\"#change-categories-input\").keyup(function (event) {\n    if (event.keyCode === 13) {\n      $(\"#change-categories\").click();\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/set-editor-metadata.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/set-editor-metadata.js"]();
/******/ 	
/******/ })()
;