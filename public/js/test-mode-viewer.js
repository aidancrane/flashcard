/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/test-mode-viewer.js":
/*!******************************************!*\
  !*** ./resources/js/test-mode-viewer.js ***!
  \******************************************/
/***/ (() => {

eval("window.startTime;\nwindow.timer_started = false;\nwindow.correct_answers = 0;\nwindow.incorrect_answers = 0;\nwindow.answer_array = []; // https://stackoverflow.com/a/11486026/2697955\n// wording changed slightly although function remains the same.\n// not sure what ret += \"\" is for?\n\nfunction timeElapsedInSecondsMinutesHours(elapsedSeconds) {\n  var hrs = ~~(elapsedSeconds / 3600);\n  var mins = ~~(elapsedSeconds % 3600 / 60);\n  var secs = ~~elapsedSeconds % 60;\n  var ret = \"\";\n\n  if (hrs > 0) {\n    ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n  }\n\n  ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n  ret += \"\" + secs;\n  return ret;\n}\n\nfunction timedEvent() {\n  // If the timer is not started, start it.\n  if (!window.timer_started) {\n    timer_started = true;\n    startTime = new Date();\n    setInterval(function () {\n      endTime = new Date();\n      var timeDiff = endTime - startTime;\n      timeDiff /= 1000;\n      var seconds = Math.round(timeDiff); //console.log(timeElapsedInSecondsMinutesHours(seconds));\n\n      $('#timer').html(timeElapsedInSecondsMinutesHours(seconds));\n    }, 1000);\n  }\n}\n\nfunction incorrectProgress() {\n  answer_array[window.current_slide_ticker] = \"incorrect\"; // $('#progress_bar_fail').css(\"width\", ((window.incorrect_answers / window.flashcards.length) * 100) + \"%\");\n  // $('#progress_bar').css(\"width\", (((window.current_slide_ticker - window.incorrect_answers - window.correct_answers) / window.flashcards.length) * 100) + \"%\");\n\n  setProgressBars();\n}\n\nfunction correctProgress() {\n  answer_array[window.current_slide_ticker] = \"correct\"; // $('#progress_bar_success').css(\"width\", ((window.correct_answers / window.flashcards.length) * 100) + \"%\");\n  // $('#progress_bar').css(\"width\", (((window.current_slide_ticker - window.incorrect_answers - window.correct_answers) / window.flashcards.length) * 100) + \"%\");\n\n  setProgressBars();\n}\n\nfunction backtrackProgressBar() {\n  for (i = window.current_slide_ticker; i < window.flashcards.length; i++) {\n    answer_array[i + 1] = \"skipped\";\n  } // $('#progress_bar_fail').css(\"width\", ((window.incorrect_answers / window.flashcards.length) * 100) + \"%\");\n  // $('#progress_bar_success').css(\"width\", ((window.correct_answers / window.flashcards.length) * 100) + \"%\");\n\n\n  setProgressBars();\n}\n\nfunction setProgressBars() {\n  // FIXME\n  correct_answers = 0;\n  incorrect_answers = 0;\n\n  for (i = 0; i < answer_array.length; i++) {\n    var currentItem = answer_array[i + 1];\n\n    if (currentItem == \"correct\") {\n      correct_answers++;\n    } else if (currentItem == \"incorrect\") {\n      incorrect_answers++;\n    }\n  }\n\n  skipped_questions = window.current_slide_ticker - (incorrect_answers + correct_answers);\n  console.log(\"---\");\n  console.log(\"skipped_questions:\" + skipped_questions);\n  console.log(\"correct_answers:\" + correct_answers);\n  console.log(\"incorrect_answers:\" + incorrect_answers);\n  console.log(\"window.flashcards.length:\" + window.flashcards.length);\n  $('#progress_bar_success').css(\"width\", correct_answers / window.flashcards.length * 100 + \"%\");\n  $('#progress_bar_fail').css(\"width\", incorrect_answers / window.flashcards.length * 100 + \"%\");\n\n  if (skipped_questions == 0) {\n    // We need the progress bar to take precidence over study mode.\n    // So because study mode sets the progress bar also, we need to hide this\n    // behaviour behind a delay.\n    // anti-pattern who???\n    setTimeout(function () {\n      $('#progress_bar').css(\"width\", \"0%\");\n    }, 10); // don't worry too much, the answer scores are updated every time we press a card.\n  } else {\n    $('#progress_bar').css(\"width\", skipped_questions / window.flashcards.length * 100 + \"%\");\n  }\n}\n\nfunction set_up_answer_array() {\n  // We need to make an array to start out.\n  // By default every question is marked as skipped for \"fastness\".\n  // bad code probs but it works?\n  for (i = 1; i <= window.flashcards.length; i++) {\n    // We ignore the first element in answer_array[0] because flaschards are addressed by\n    // their index.\n    answer_array[i] = \"skipped\";\n  }\n}\n\n$('document').ready(function () {\n  //window.setSlide(2);\n  //window.flipside();\n  //window.nextSlide();\n  //window.previousSlide();\n  //window.on_side_a\n  //window.current_slide_ticker\n  timedEvent();\n  set_up_answer_array();\n  document.getElementById(\"cross_button\").addEventListener(\"click\", function () {\n    console.log(\"flashcard:\" + window.current_slide_ticker + \" was marked as wrong by the user.\"); // Start timer if not already started.\n\n    timedEvent(); // Log progress for graphs and such, analysis submitted at the end ovbs.\n\n    incorrectProgress(); // progress slide.\n\n    nextSlide();\n  });\n  document.getElementById(\"tick_button\").addEventListener(\"click\", function () {\n    console.log(\"flashcard:\" + window.current_slide_ticker + \" was marked as correct by the user.\"); // Start timer if not already started.\n\n    timedEvent(); // Log progress for the studious student.\n\n    correctProgress(); // progress slide.\n\n    nextSlide();\n  });\n  document.getElementById(\"left_button\").addEventListener(\"click\", function () {\n    // We might have skipped some questions so we need to backtrack.\n    backtrackProgressBar();\n  });\n  document.getElementById(\"right_button\").addEventListener(\"click\", function () {\n    // we clicked the left arrow, but we arent allowed to backtrack.\n    // All previously entered answers will need to be submitted from the moment you\n    // backtracked.\n    setProgressBars();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdGVzdC1tb2RlLXZpZXdlci5qcz9jYzBkIl0sIm5hbWVzIjpbIndpbmRvdyIsInN0YXJ0VGltZSIsInRpbWVyX3N0YXJ0ZWQiLCJjb3JyZWN0X2Fuc3dlcnMiLCJpbmNvcnJlY3RfYW5zd2VycyIsImFuc3dlcl9hcnJheSIsInRpbWVFbGFwc2VkSW5TZWNvbmRzTWludXRlc0hvdXJzIiwiZWxhcHNlZFNlY29uZHMiLCJocnMiLCJtaW5zIiwic2VjcyIsInJldCIsInRpbWVkRXZlbnQiLCJEYXRlIiwic2V0SW50ZXJ2YWwiLCJlbmRUaW1lIiwidGltZURpZmYiLCJzZWNvbmRzIiwiTWF0aCIsInJvdW5kIiwiJCIsImh0bWwiLCJpbmNvcnJlY3RQcm9ncmVzcyIsImN1cnJlbnRfc2xpZGVfdGlja2VyIiwic2V0UHJvZ3Jlc3NCYXJzIiwiY29ycmVjdFByb2dyZXNzIiwiYmFja3RyYWNrUHJvZ3Jlc3NCYXIiLCJpIiwiZmxhc2hjYXJkcyIsImxlbmd0aCIsImN1cnJlbnRJdGVtIiwic2tpcHBlZF9xdWVzdGlvbnMiLCJjb25zb2xlIiwibG9nIiwiY3NzIiwic2V0VGltZW91dCIsInNldF91cF9hbnN3ZXJfYXJyYXkiLCJyZWFkeSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwibmV4dFNsaWRlIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxTQUFQO0FBQ0FELE1BQU0sQ0FBQ0UsYUFBUCxHQUF1QixLQUF2QjtBQUdBRixNQUFNLENBQUNHLGVBQVAsR0FBeUIsQ0FBekI7QUFDQUgsTUFBTSxDQUFDSSxpQkFBUCxHQUEyQixDQUEzQjtBQUNBSixNQUFNLENBQUNLLFlBQVAsR0FBc0IsRUFBdEIsQyxDQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTQyxnQ0FBVCxDQUEwQ0MsY0FBMUMsRUFBMEQ7QUFDdEQsTUFBSUMsR0FBRyxHQUFHLENBQUMsRUFBRUQsY0FBYyxHQUFH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b0JBQW9CO0FBQ3ZCLEdBSEQ7QUFLQVksRUFBQUEsUUFBUSxDQUFDQyxjQUFULENBQXdCLGNBQXhCLEVBQXdDQyxnQkFBeEMsQ0FBeUQsT0FBekQsRUFBa0UsWUFBVztBQUN6RTtBQUNBO0FBQ0E7QUFDQWhCLElBQUFBLGVBQWU7QUFDbEIsR0FMRDtBQU9ILENBNUNEIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LnN0YXJ0VGltZTtcbndpbmRvdy50aW1lcl9zdGFydGVkID0gZmFsc2U7XG5cblxud2luZG93LmNvcnJlY3RfYW5zd2VycyA9IDA7XG53aW5kb3cuaW5jb3JyZWN0X2Fuc3dlcnMgPSAwO1xud2luZG93LmFuc3dlcl9hcnJheSA9IFtdO1xuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExNDg2MDI2LzI2OTc5NTVcbi8vIHdvcmRpbmcgY2hhbmdlZCBzbGlnaHRseSBhbHRob3VnaCBmdW5jdGlvbiByZW1haW5zIHRoZSBzYW1lLlxuLy8gbm90IHN1cmUgd2hhdCByZXQgKz0gXCJcIiBpcyBmb3I/XG5mdW5jdGlvbiB0aW1lRWxhcHNlZEluU2Vjb25kc01pbnV0ZXNIb3VycyhlbGFwc2VkU2Vjb25kcykge1xuICAgIHZhciBocnMgPSB+fihlbGFwc2VkU2Vjb25kcyAvIDM2MDApO1xuICAgIHZhciBtaW5zID0gfn4oKGVsYXBzZWRTZWNvbmRzICUgMzYwMCkgLyA2MCk7XG4gICAgdmFyIHNlY3MgPSB+fmVsYXBzZWRTZWNvbmRzICUgNjA7XG4gICAgdmFyIHJldCA9IFwiXCI7XG4gICAgaWYgKGhycyA+IDApIHtcbiAgICAgICAgcmV0ICs9IFwiXCIgKyBocnMgKyBcIjpcIiArIChtaW5zIDwgMTAgPyBcIjBcIiA6IFwiXCIpO1xuICAgIH1cbiAgICByZXQgKz0gXCJcIiArIG1pbnMgKyBcIjpcIiArIChzZWNzIDwgMTAgPyBcIjBcIiA6IFwiXCIpO1xuICAgIHJldCArPSBcIlwiICsgc2VjcztcbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiB0aW1lZEV2ZW50KCkge1xuICAgIC8vIElmIHRoZSB0aW1lciBpcyBub3Qgc3RhcnRlZCwgc3RhcnQgaXQuXG4gICAgaWYgKCF3aW5kb3cudGltZXJfc3RhcnRlZCkge1xuICAgICAgICB0aW1lcl9zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlbmRUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHZhciB0aW1lRGlmZiA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG4gICAgICAgICAgICB0aW1lRGlmZiAvPSAxMDAwO1xuICAgICAgICAgICAgdmFyIHNlY29uZHMgPSBNYXRoLnJvdW5kKHRpbWVEaWZmKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codGltZUVsYXBzZWRJblNlY29uZHNNaW51dGVzSG91cnMoc2Vjb25kcykpO1xuICAgICAgICAgICAgJCgnI3RpbWVyJykuaHRtbCh0aW1lRWxhcHNlZEluU2Vjb25kc01pbnV0ZXNIb3VycyhzZWNvbmRzKSk7XG5cbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbmNvcnJlY3RQcm9ncmVzcygpIHtcbiAgICBhbnN3ZXJfYXJyYXlbd2luZG93LmN1cnJlbnRfc2xpZGVfdGlja2VyXSA9IFwiaW5jb3JyZWN0XCI7XG4gICAgLy8gJCgnI3Byb2dyZXNzX2Jhcl9mYWlsJykuY3NzKFwid2lkdGhcIiwgKCh3aW5kb3cuaW5jb3JyZWN0X2Fuc3dlcnMgLyB3aW5kb3cuZmxhc2hjYXJkcy5sZW5ndGgpICogMTAwKSArIFwiJVwiKTtcbiAgICAvLyAkKCcjcHJvZ3Jlc3NfYmFyJykuY3NzKFwid2lkdGhcIiwgKCgod2luZG93LmN1cnJlbnRfc2xpZGVfdGlja2VyIC0gd2luZG93LmluY29ycmVjdF9hbnN3ZXJzIC0gd2luZG93LmNvcnJlY3RfYW5zd2VycykgLyB3aW5kb3cuZmxhc2hjYXJkcy5sZW5ndGgpICogMTAwKSArIFwiJVwiKTtcbiAgICBzZXRQcm9ncmVzc0JhcnMoKTtcbn1cblxuZnVuY3Rpb24gY29ycmVjdFByb2dyZXNzKCkge1xuICAgIGFuc3dlcl9hcnJheVt3aW5kb3cuY3VycmVudF9zbGlkZV90aWNrZXJdID0gXCJjb3JyZWN0XCI7XG4gICAgLy8gJCgnI3Byb2dyZXNzX2Jhcl9zdWNjZXNzJykuY3NzKFwid2lkdGhcIiwgKCh3aW5kb3cuY29ycmVjdF9hbnN3ZXJzIC8gd2luZG93LmZsYXNoY2FyZHMubGVuZ3RoKSAqIDEwMCkgKyBcIiVcIik7XG4gICAgLy8gJCgnI3Byb2dyZXNzX2JhcicpLmNzcyhcIndpZHRoXCIsICgoKHdpbmRvdy5jdXJyZW50X3NsaWRlX3RpY2tlciAtIHdpbmRvdy5pbmNvcnJlY3RfYW5zd2VycyAtIHdpbmRvdy5jb3JyZWN0X2Fuc3dlcnMpIC8gd2luZG93LmZsYXNoY2FyZHMubGVuZ3RoKSAqIDEwMCkgKyBcIiVcIik7XG4gICAgc2V0UHJvZ3Jlc3NCYXJzKCk7XG59XG5cbmZ1bmN0aW9uIGJhY2t0cmFja1Byb2dyZXNzQmFyKCkge1xuXG4gICAgZm9yIChpID0gd2luZG93LmN1cnJlbnRfc2xpZGVfdGlja2VyOyBpIDwgd2luZG93LmZsYXNoY2FyZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYW5zd2VyX2FycmF5W2kgKyAxXSA9IFwic2tpcHBlZFwiO1xuICAgIH1cbiAgICAvLyAkKCcjcHJvZ3Jlc3NfYmFyX2ZhaWwnKS5jc3MoXCJ3aWR0aFwiLCAoKHdpbmRvdy5pbmNvcnJlY3RfYW5zd2VycyAvIHdpbmRvdy5mbGFzaGNhcmRzLmxlbmd0aCkgKiAxMDApICsgXCIlXCIpO1xuICAgIC8vICQoJyNwcm9ncmVzc19iYXJfc3VjY2VzcycpLmNzcyhcIndpZHRoXCIsICgod2luZG93LmNvcnJlY3RfYW5zd2VycyAvIHdpbmRvdy5mbGFzaGNhcmRzLmxlbmd0aCkgKiAxMDApICsgXCIlXCIpO1xuICAgIHNldFByb2dyZXNzQmFycygpO1xufVxuXG5mdW5jdGlvbiBzZXRQcm9ncmVzc0JhcnMoKSB7XG4gICAgLy8gRklYTUVcbiAgICBjb3JyZWN0X2Fuc3dlcnMgPSAwO1xuICAgIGluY29ycmVjdF9hbnN3ZXJzID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYW5zd2VyX2FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJyZW50SXRlbSA9IGFuc3dlcl9hcnJheVtpICsgMV07XG4gICAgICAgIGlmIChjdXJyZW50SXRlbSA9PSBcImNvcnJlY3RcIikge1xuICAgICAgICAgICAgY29ycmVjdF9hbnN3ZXJzKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3VycmVudEl0ZW0gPT0gXCJpbmNvcnJlY3RcIikge1xuICAgICAgICAgICAgaW5jb3JyZWN0X2Fuc3dlcnMrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICBza2lwcGVkX3F1ZXN0aW9ucyA9ICB3aW5kb3cuY3VycmVudF9zbGlkZV90aWNrZXIgLSAoaW5jb3JyZWN0X2Fuc3dlcnMgKyBjb3JyZWN0X2Fuc3dlcnMpO1xuICAgIGNvbnNvbGUubG9nKFwiLS0tXCIpO1xuICAgIGNvbnNvbGUubG9nKFwic2tpcHBlZF9xdWVzdGlvbnM6XCIgKyBza2lwcGVkX3F1ZXN0aW9ucyk7XG4gICAgY29uc29sZS5sb2coXCJjb3JyZWN0X2Fuc3dlcnM6XCIgKyBjb3JyZWN0X2Fuc3dlcnMpO1xuICAgIGNvbnNvbGUubG9nKFwiaW5jb3JyZWN0X2Fuc3dlcnM6XCIgKyBpbmNvcnJlY3RfYW5zd2Vycyk7XG4gICAgY29uc29sZS5sb2coXCJ3aW5kb3cuZmxhc2hjYXJkcy5sZW5ndGg6XCIgKyB3aW5kb3cuZmxhc2hjYXJkcy5sZW5ndGgpO1xuICAgICQoJyNwcm9ncmVzc19iYXJfc3VjY2VzcycpLmNzcyhcIndpZHRoXCIsICgoY29ycmVjdF9hbnN3ZXJzIC8gd2luZG93LmZsYXNoY2FyZHMubGVuZ3RoKSAqIDEwMCkgKyBcIiVcIik7XG4gICAgJCgnI3Byb2dyZXNzX2Jhcl9mYWlsJykuY3NzKFwid2lkdGhcIiwgKChpbmNvcnJlY3RfYW5zd2VycyAvIHdpbmRvdy5mbGFzaGNhcmRzLmxlbmd0aCkgKiAxMDApICsgXCIlXCIpO1xuICAgIGlmIChza2lwcGVkX3F1ZXN0aW9ucyA9PSAwKVxuICAgIHtcbiAgICAgIC8vIFdlIG5lZWQgdGhlIHByb2dyZXNzIGJhciB0byB0YWtlIHByZWNpZGVuY2Ugb3ZlciBzdHVkeSBtb2RlLlxuICAgICAgLy8gU28gYmVjYXVzZSBzdHVkeSBtb2RlIHNldHMgdGhlIHByb2dyZXNzIGJhciBhbHNvLCB3ZSBuZWVkIHRvIGhpZGUgdGhpc1xuICAgICAgLy8gYmVoYXZpb3VyIGJlaGluZCBhIGRlbGF5LlxuICAgICAgLy8gYW50aS1wYXR0ZXJuIHdobz8/P1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgJCgnI3Byb2dyZXNzX2JhcicpLmNzcyhcIndpZHRoXCIsIFwiMCVcIik7IH0sIDEwKTtcbiAgICAgIC8vIGRvbid0IHdvcnJ5IHRvbyBtdWNoLCB0aGUgYW5zd2VyIHNjb3JlcyBhcmUgdXBkYXRlZCBldmVyeSB0aW1lIHdlIHByZXNzIGEgY2FyZC5cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAkKCcjcHJvZ3Jlc3NfYmFyJykuY3NzKFwid2lkdGhcIiwgKChza2lwcGVkX3F1ZXN0aW9ucyAvIHdpbmRvdy5mbGFzaGNhcmRzLmxlbmd0aCkgKiAxMDApICsgXCIlXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0X3VwX2Fuc3dlcl9hcnJheSgpIHtcbiAgLy8gV2UgbmVlZCB0byBtYWtlIGFuIGFycmF5IHRvIHN0YXJ0IG91dC5cbiAgLy8gQnkgZGVmYXVsdCBldmVyeSBxdWVzdGlvbiBpcyBtYXJrZWQgYXMgc2tpcHBlZCBmb3IgXCJmYXN0bmVzc1wiLlxuICAvLyBiYWQgY29kZSBwcm9icyBidXQgaXQgd29ya3M/XG4gICAgZm9yIChpID0gMTsgaSA8PSB3aW5kb3cuZmxhc2hjYXJkcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gV2UgaWdub3JlIHRoZSBmaXJzdCBlbGVtZW50IGluIGFuc3dlcl9hcnJheVswXSBiZWNhdXNlIGZsYXNjaGFyZHMgYXJlIGFkZHJlc3NlZCBieVxuICAgICAgLy8gdGhlaXIgaW5kZXguXG4gICAgICAgIGFuc3dlcl9hcnJheVtpXSA9IFwic2tpcHBlZFwiO1xuICAgIH1cbn1cblxuJCgnZG9jdW1lbnQnKS5yZWFkeShmdW5jdGlvbigpIHtcblxuICAgIC8vd2luZG93LnNldFNsaWRlKDIpO1xuICAgIC8vd2luZG93LmZsaXBzaWRlKCk7XG4gICAgLy93aW5kb3cubmV4dFNsaWRlKCk7XG4gICAgLy93aW5kb3cucHJldmlvdXNTbGlkZSgpO1xuICAgIC8vd2luZG93Lm9uX3NpZGVfYVxuICAgIC8vd2luZG93LmN1cnJlbnRfc2xpZGVfdGlja2VyXG5cbiAgICB0aW1lZEV2ZW50KCk7XG4gICAgc2V0X3VwX2Fuc3dlcl9hcnJheSgpO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjcm9zc19idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImZsYXNoY2FyZDpcIiArIHdpbmRvdy5jdXJyZW50X3NsaWRlX3RpY2tlciArIFwiIHdhcyBtYXJrZWQgYXMgd3JvbmcgYnkgdGhlIHVzZXIuXCIpO1xuICAgICAgICAvLyBTdGFydCB0aW1lciBpZiBub3QgYWxyZWFkeSBzdGFydGVkLlxuICAgICAgICB0aW1lZEV2ZW50KCk7XG4gICAgICAgIC8vIExvZyBwcm9ncmVzcyBmb3IgZ3JhcGhzIGFuZCBzdWNoLCBhbmFseXNpcyBzdWJtaXR0ZWQgYXQgdGhlIGVuZCBvdmJzLlxuICAgICAgICBpbmNvcnJlY3RQcm9ncmVzcygpO1xuICAgICAgICAvLyBwcm9ncmVzcyBzbGlkZS5cbiAgICAgICAgbmV4dFNsaWRlKCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpY2tfYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJmbGFzaGNhcmQ6XCIgKyB3aW5kb3cuY3VycmVudF9zbGlkZV90aWNrZXIgKyBcIiB3YXMgbWFya2VkIGFzIGNvcnJlY3QgYnkgdGhlIHVzZXIuXCIpO1xuICAgICAgICAvLyBTdGFydCB0aW1lciBpZiBub3QgYWxyZWFkeSBzdGFydGVkLlxuICAgICAgICB0aW1lZEV2ZW50KCk7XG4gICAgICAgIC8vIExvZyBwcm9ncmVzcyBmb3IgdGhlIHN0dWRpb3VzIHN0dWRlbnQuXG4gICAgICAgIGNvcnJlY3RQcm9ncmVzcygpO1xuICAgICAgICAvLyBwcm9ncmVzcyBzbGlkZS5cbiAgICAgICAgbmV4dFNsaWRlKCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlZnRfYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gV2UgbWlnaHQgaGF2ZSBza2lwcGVkIHNvbWUgcXVlc3Rpb25zIHNvIHdlIG5lZWQgdG8gYmFja3RyYWNrLlxuICAgICAgICBiYWNrdHJhY2tQcm9ncmVzc0JhcigpO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyaWdodF9idXR0b25cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyB3ZSBjbGlja2VkIHRoZSBsZWZ0IGFycm93LCBidXQgd2UgYXJlbnQgYWxsb3dlZCB0byBiYWNrdHJhY2suXG4gICAgICAgIC8vIEFsbCBwcmV2aW91c2x5IGVudGVyZWQgYW5zd2VycyB3aWxsIG5lZWQgdG8gYmUgc3VibWl0dGVkIGZyb20gdGhlIG1vbWVudCB5b3VcbiAgICAgICAgLy8gYmFja3RyYWNrZWQuXG4gICAgICAgIHNldFByb2dyZXNzQmFycygpO1xuICAgIH0pO1xuXG59KTtcbiJdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvdGVzdC1tb2RlLXZpZXdlci5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/test-mode-viewer.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/test-mode-viewer.js"]();
/******/ 	
/******/ })()
;