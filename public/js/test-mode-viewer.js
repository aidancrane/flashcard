/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/test-mode-viewer.js":
/*!******************************************!*\
  !*** ./resources/js/test-mode-viewer.js ***!
  \******************************************/
/***/ (() => {

eval("window.startTime;\nwindow.timer_started = false;\nwindow.correct_answers = 0;\nwindow.incorrect_answers = 0;\nwindow.answer_array = [];\nendGameRound = false; // https://stackoverflow.com/a/11486026/2697955\n// wording changed slightly although function remains the same.\n// not sure what ret += \"\" is for?\n\nfunction timeElapsedInSecondsMinutesHours(elapsedSeconds) {\n  var hrs = ~~(elapsedSeconds / 3600);\n  var mins = ~~(elapsedSeconds % 3600 / 60);\n  var secs = ~~elapsedSeconds % 60;\n  var ret = \"\";\n\n  if (hrs > 0) {\n    ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n  }\n\n  ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n  ret += \"\" + secs;\n  return ret;\n}\n\nfunction timedEvent() {\n  // If the timer is not started, start it.\n  if (!window.timer_started) {\n    timer_started = true;\n    startTime = new Date();\n    setInterval(function () {\n      endTime = new Date();\n      var timeDiff = endTime - startTime;\n      timeDiff /= 1000;\n      var seconds = Math.round(timeDiff); //console.log(timeElapsedInSecondsMinutesHours(seconds));\n\n      $('#timer').html(timeElapsedInSecondsMinutesHours(seconds));\n    }, 1000);\n  }\n}\n\nfunction incorrectProgress() {\n  answer_array[window.current_slide_ticker] = \"incorrect\"; // $('#progress_bar_fail').css(\"width\", ((window.incorrect_answers / window.flashcards.length) * 100) + \"%\");\n  // $('#progress_bar').css(\"width\", (((window.current_slide_ticker - window.incorrect_answers - window.correct_answers) / window.flashcards.length) * 100) + \"%\");\n\n  setProgressBars();\n}\n\nfunction correctProgress() {\n  answer_array[window.current_slide_ticker] = \"correct\"; // $('#progress_bar_success').css(\"width\", ((window.correct_answers / window.flashcards.length) * 100) + \"%\");\n  // $('#progress_bar').css(\"width\", (((window.current_slide_ticker - window.incorrect_answers - window.correct_answers) / window.flashcards.length) * 100) + \"%\");\n\n  setProgressBars();\n}\n\nfunction backtrackProgressBar() {\n  for (i = window.current_slide_ticker; i < window.flashcards.length; i++) {\n    answer_array[i + 1] = \"skipped\";\n  } // $('#progress_bar_fail').css(\"width\", ((window.incorrect_answers / window.flashcards.length) * 100) + \"%\");\n  // $('#progress_bar_success').css(\"width\", ((window.correct_answers / window.flashcards.length) * 100) + \"%\");\n\n\n  setProgressBars();\n}\n\nfunction setProgressBars() {\n  // FIXME\n  correct_answers = 0;\n  incorrect_answers = 0;\n\n  for (i = 0; i < answer_array.length; i++) {\n    var currentItem = answer_array[i + 1];\n\n    if (currentItem == \"correct\") {\n      correct_answers++;\n    } else if (currentItem == \"incorrect\") {\n      incorrect_answers++;\n    }\n  }\n\n  skipped_questions = window.current_slide_ticker - (incorrect_answers + correct_answers);\n  console.log(\"---\");\n  console.log(\"skipped_questions:\" + skipped_questions);\n  console.log(\"correct_answers:\" + correct_answers);\n  console.log(\"incorrect_answers:\" + incorrect_answers);\n  console.log(\"window.flashcards.length:\" + window.flashcards.length);\n  $('#progress_bar_success').css(\"width\", correct_answers / window.flashcards.length * 100 + \"%\");\n  $('#progress_bar_fail').css(\"width\", incorrect_answers / window.flashcards.length * 100 + \"%\");\n\n  if (skipped_questions == 0) {\n    // We need the progress bar to take precidence over study mode.\n    // So because study mode sets the progress bar also, we need to hide this\n    // behaviour behind a delay.\n    // anti-pattern who???\n    setTimeout(function () {\n      $('#progress_bar').css(\"width\", \"0%\");\n    }, 10); // don't worry too much, the answer scores are updated every time we press a card.\n  } else {\n    $('#progress_bar').css(\"width\", skipped_questions / window.flashcards.length * 100 + \"%\");\n  }\n}\n\nfunction set_up_answer_array() {\n  // We need to make an array to start out.\n  // By default every question is marked as skipped for \"fastness\".\n  // bad code probs but it works?\n  for (i = 1; i <= window.flashcards.length; i++) {\n    // We ignore the first element in answer_array[0] because flaschards are addressed by\n    // their index.\n    answer_array[i] = \"skipped\";\n  }\n} // Brilliant work so far!\n\n\nfunction isItEndOfTheRoad() {\n  if (endGameRound == true) {\n    console.log(\"End Game\"); //$('#submit-test').click();\n\n    $('.test').submit();\n  }\n\n  if (window.current_slide_ticker == window.flashcards.length) {\n    $('#right_button').css('background-color', '#ffc400');\n    $('#tick_button').css('background-color', '#ffc400');\n    $('#cross_button').css('background-color', '#ffc400');\n    $('#tick_button').removeClass('bg-success');\n    $('#cross_button').removeClass('bg-danger');\n    endGameRound = true;\n  } else {\n    $('#right_button').css(\"background-color\", \"\");\n    $('#tick_button').css(\"background-color\", \"\");\n    $('#cross_button').css(\"background-color\", \"\");\n    $('#tick_button').addClass('bg-success');\n    $('#cross_button').addClass('bg-danger');\n    endGameRound = false;\n  }\n}\n\n$('document').ready(function () {\n  //window.setSlide(2);\n  //window.flipside();\n  //window.nextSlide();\n  //window.previousSlide();\n  //window.on_side_a\n  //window.current_slide_ticker\n  timedEvent();\n  set_up_answer_array();\n  document.getElementById(\"cross_button\").addEventListener(\"click\", function () {\n    console.log(\"flashcard:\" + window.current_slide_ticker + \" was marked as wrong by the user.\"); // Start timer if not already started.\n\n    timedEvent(); // Log progress for graphs and such, analysis submitted at the end ovbs.\n\n    incorrectProgress(); // progress slide.\n\n    nextSlide();\n    isItEndOfTheRoad();\n  });\n  document.getElementById(\"tick_button\").addEventListener(\"click\", function () {\n    console.log(\"flashcard:\" + window.current_slide_ticker + \" was marked as correct by the user.\"); // Start timer if not already started.\n\n    timedEvent(); // Log progress for the studious student.\n\n    correctProgress(); // progress slide.\n\n    nextSlide();\n    isItEndOfTheRoad();\n  });\n  document.getElementById(\"left_button\").addEventListener(\"click\", function () {\n    // We might have skipped some questions so we need to backtrack.\n    backtrackProgressBar();\n    isItEndOfTheRoad();\n  });\n  document.getElementById(\"right_button\").addEventListener(\"click\", function () {\n    // we clicked the left arrow, but we arent allowed to backtrack.\n    // All previously entered answers will need to be submitted from the moment you\n    // backtracked.\n    setProgressBars();\n    isItEndOfTheRoad();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/test-mode-viewer.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/test-mode-viewer.js"]();
/******/ 	
/******/ })()
;